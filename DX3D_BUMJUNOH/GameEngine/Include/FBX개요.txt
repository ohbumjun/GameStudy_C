
>> FBX Scene <<

- FBX 에서 Scene 은, 3d Scene 을 구성하는 모든 Mesh, Camera, Light 및 다른 Scene 요소를 관리하기 위한
"컨테이너" 이다.

- Scene 내의 각 요소들을 "Node" 라고 부른다.
- 3D Scene 내의 모든 Node 들을 구성하는데 사용되는 자료구조.는 일반적으로 Scene Graph. --> Tree 자료 구조


- Scene 구성 요소들은, FbxNode, FbxNodeAttribute 의 서브클래스들의 묶음으로 정의된다.
ex) Light 의 경우, FbxNode* lightNode 와, FbxLight* light 쌍으로 구성되어 있다
- FbxNode 에 해당하는 것이, lightNode 이고, FbxNodeAttribute의 서브 클래스에 해당하는 것이 light 이다.

>> FBX Root Node <<

- Export 시에, 파일에 저장되지 않는다.
- 오직, Root Node 를 제외한, 자식 노드들만이 Export 되어 저장될 것이다.

>> FBX Nodes <<

- Node 는 주로, Scene 내부 요소들의 Position, Rotation, Scale 을 명시하는데 사용된다.

>> 노드 계층 구조 <<

- FbxNode::GetChild, GetParent, GetChildCount 등의 메서드를 통해, 노드의 계층 구조(트리) 를 순회할 수 있다.
- position, rotation, scale 은 To-Parent 좌표계로 표현된다.
- rotation과 scaling 변환은 역시 To-parent의 형태로 적용되지만 
	자식은 이 변환을 상속할 떄 상속 타입을 지정할 수 있다.(FbxNode::SetTransformationInheritType())

>> FbxNodeAttributes <<

- 매쉬, 조명, 카메라 또는 Scene 에서 표현되는 모든 Object 들은, FbxNodeAttributes 의 Sub Class 로 추상화된다.
ex) FbxMesh, FbxCamera, FbxLight

- FbxNodeAttributes 는 scene 에서의 position을 표현하기 위해 FbxNode 에 묶여 있다.

- ex) lightNode의 AttributeNode는 FbxLight* light 이고 
	Scene에서의 lightNode의 position 데이타는 rootNode에서 lightNode 까지의 변환과정의 누적으로 달려 있을 것.


>> Transformation Data <<

- 노드의 변환 데이터인 translation, rotation, scaling 벡터 (to-parent)는 FbxTypedProperty 오브젝트로 표현된다.

- FbxNode::LclTranslation, FbxNode::LclRotation, FbxNode::LclScalilng 을 통해 접근 가능하다.
	ex) Lcl : Lcal을 의미

- 글로벌좌표계에서의 translation, rotation, scaling은 변환 행렬을 통해 표현될 수 있는데 
	이 변환행렬은  FbxNode::EvaluateGlobalTransform().를 통해 얻을 수 있다.

>> Mapping Mode <<

내가 말했듯이 control point는 기본적으로 vertex이다.

하지만 여기에 문제가 하나 있다.

큐브가 8개의 control point를 갖는데에도 불구하고 큐브가 정상적으로 보이도록 하려면 8개 이상의 normal이 필요하다.

만약 sharp edge를 갖고 있으면 같은 control point에 대해 두 개 이상의 normal을 할당해야지 모서리에 뾰족한 느낌을 줄 수 있기 때문이다.

이것은 vertex를 게임 엔진으로 가져올 때 필요한 개념이고, 이를 위해서는 결국 위치는 같지만 normal은 다른 3개의 정점을 꼭지점에 가져야한다.

결과적으로 FbxGeomertyElement::eByControlPoint는 게임에서 뾰족한 모서리가 필요 없을 때, 각각의 control point가 하나의 normal을 갖는 것이고,

FbxGeomertyElement::eByPolygonVertex는 게임에서 뾰족한 모서리를 갖고, 큐브의 각 면에서 각 정점에 대해 normal이 필요하다.

왜냐하면 같은 정점에 대해서 각각의 면이 다른 normal을 가지니까! 

(역자주 : 3D 프로그래밍 예제에서 보통 큐브의 법선벡터를 구할 때 정점을 공유하는 모든 면의 법선벡터를 구해서 더하고 정규화하는 것을 떠올리면 이해가 쉬울 것이다.)

즉, FbxGeomertyElement::eByControlPoint 는, vertex 가 하나의 mapping coordinate 만을 지닌 다는 것이고

FbxGeomertyElement::eByPolygonVertex 는 vertex 하나가, 그것이 구성하는 polygon 개수 만큼의 mapping coordinate 를 지닌다는 것이다.

>> Reference Mode <<

https://m.blog.naver.com/lifeisforu/80105592736

case FbxGeometryElement::eDirect: 
case FbxGeometryElement::eIndexToDirect: