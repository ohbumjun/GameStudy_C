https://towardsdatascience.com/c-memory-allocation-deallocation-for-data-processing-1b204fb8a9c

물리 메모리는
커널 영역, 유저 영역으로 나눈다.
유저 영역은 흔히 어플리케이션에 해당하는 영역이다.

그리고 각각은, 실제 허용된 물리 공간 보다 큰
가상 메모리 공간을 할당 받는다.

> C++ 메모리는 ( 유저 영역에서의 가상 메모리 )
- 코드, 데이터, 힙, 스택 영역으로 구성되어 있다.

> OS는 Heap 영역을 어떻게 관리할까 ?
- Linux의 경우, Program Break를 조정하면서 관리한다.
즉, 현재 Heap의 Limit 을 가리키는 Program Break를 
Heap에 추가할 당하면, 높이고, 해제하면 낮추는 식으로

이는 매우 위험한 방식이다.
에러날 확률이 높다.

>> 1번째 방식 : C 언어 메모리 할당 방식 ( malloc ) ----------------------------
- malloc : 주어진 크기만큼 메모리를 할당한다.
- free : 그 반대
- realloc : 주어진 크기만큼 resize 한다
- calloc : 주어진 크기만큼 배열 공간의 크기를 잡는다

이 방식이 더 안전한 이유는
어플리케이션이 현재 Heap의 한계를 직접 알 필요가 없기 때문이다.

그저 할당된 메모리 공간의 크기에 대해서만 알면된다.

> 그렇다면, malloc은 어떠한 방식으로 동작하는 것일까 ?
- malloc 함수의 경우 어플리케이션이 요구하는 각각의 메모리 블록에
metadata를 추가함으로써 메모리를 관리한다.

예를 들어, 
Size, Allocation Status 라는 MetaData를 지닌 메모리 블록을
할당한다고 가정해보자.

malloc, realloc, calloc의 경우
메모리 공간에서의 필요한 만큼의 여유공간을 찾는다.

> 그렇다면, 더 구체적으로 Memory Allocation, 즉, 메모리 할당은 
어떠한 방식으로 이루어질까 ?
- 먼저 어떻게 빈 공간을 찾는지. Search 하는지를 알아봐야 한다.

First-Fit, Second-Fit, Best-Fit 
각각 찾은 첫번째, 두번째 , Best 메모리 블록을 찾는 과정

과정 그 자체보다 중요한 것은
메모리는 연속적으로 할당하는데
8의 크기를 할당할 때, 10의 여분공간이 있다면
8만 할당하고 2만큼은 놔둠으로써
메모리가 split 된다는 것이다.

> 메모리 해제 Memory Deallocation은 어떻게 이루어질까 ?
- 메모리를 해제한다고 하여, 해제된 메모리가 시스템으로 돌아가는 것이 아니다
그냥 그 자리에 여전히 있되, metadata 내의 정보가 바뀐다
나 이제 안쓰여 ! free 한 놈이야 ! 라고

중요한 점은, free 되는 놈이 근처의 free 였던 놈 혹은
또 free 되는 놈과 합쳐져서 더 큰 메모리 공간을 같이 만든다는 것

그러면 이후 더 큰 크기의 메모리를 해당 위치에 새로
할당할 수 있게 될 것이다.

> 메모리 재할당 (Reallocation)
- 쉽다. 기존에 할당된 정보를 복사해서, 새로운 곳에 할당하는 것

> 메모리 단편화 : Memory Fragmentation
- 여러개의 작은 메모리 블록이 큰 블록들에 걸쳐서
여기저기에 할당되는 것이다.
- 핵심은 이로 인해, 할당할 공간이 있음에도 불구하고
우리는 메모리를 연결해서 할당해야 한다는 조건으로 인해
할당하지 못하는 경우가 생긴다는 것이다.

>> 2번째 방식 :  C++ Dynamic Memory Allocation ----------------------------

> New , Delete
- Malloc, Free 와 다른 점은 각각 생성자와 소멸자를 호출해서
객체를 생성, 소멸 시킨다는 점이다.

- 만약, 이미 공간은 할당했고, 객체만 생성하고 싶다면 "placement new" 라는 것을 사용함녀 된다.

typename std::aligned_storage<sizeof(MyData), alignof(MyData)>::type data;
MyData* ptr = new (&data) MyData(2);

- 첫 줄은, MyData Object를 스택 영역에 저장하기 위한 메모리 공간을 만들 것이고
- 두번째 줄은, 해당 영역에 새로운 메모리 공간을 추가적으로 할당할 일 없이
객체를 생성해낼 것이다.
( 참고 : ptr 에 대해 delete을 호출할 수는 없다.)




