/*
커널 오브젝트
- OS 내 핵심 부분 ( 원래는 OS와 같은 의미를 지녔었다 )

커널에 의해 관리되는 "리소스" 정보를 담고 있는 데이터 블록
즉, os에 의해 생성되고, 소멸되는 리소스를 담당하는 부분 

내가 배열을 선언하면, 
그 안에서 데이터를 추가하고, 삭제하고
이러한 여러가지 일들을 한다.
이는 프로그래머가 관리를 한다.

window에 의해 소멸, 생성되는 리소스들을 관리하는 영역이 바로
커널 오브젝트. 인 것이다.

ex) 내가 파일을 Read 모드로 불러오고 싶다.
이는 곧, 파일 생성을 운영체제에 요구한 것이다.

실제 물리적으로 어떻게 파일을 할당을 해야 하는지
그 파일 구조에 대해서는 운영체제가 알고 있기 때문이다.

즉, 파일 관련된 함수를 호출을 해서
운영체제에게 파일 생성을 요구하면
운영체제는 요구에 맞게 파일을 생성해서
합리적인 접근을 하지 않을 경우 ( ex. Read 한다고 했는데, Write를 하려고 한다면 ) 막거나
정상적으로 요구대로 동작시키는 등의 역할을 하는 것이다.

실제 파일을 생성을 해서
그것을 관리해주는 역할은 os가 해준다는 것이다. 

구체적으로 보자
예를 들어,
os는 파일에 대한 접근 정보 ( Read 인지 write 인지) + 파일을 읽는 장소 및 위치.
에 대한 정보도 가지고 있어야 한다.

그러한 정보에 근거해서 파일을  읽어서 가져다 준다.

즉, os 나름대로 파일이라는 리소스를 컨트롤할 수 있는 
정보가 필요한데 
이러한 정보를 담은 데이터 블록을, 커널 오브젝트. 라고 하는 것이다. 

---

운영체제에 의해 관리되는 리소스들.
이것들은 운영체제가 관리하기 위해 데이터 블록을 내부적으로 저장하고
이를 바로, 커널 오브젝트.라고 한다.

즉, 윈도우에 의해 생성되는 리소스들 중에서
커널 오브젝트를 동반하지 않는 것이 없다.

프로세스를 생성하려고 하면 프로세스를 생성하기 위한 커널 오브젝트.라 만들어지는 것이다. 
ex) 프로세스의 상태 정보 --> 이를 통해 스케줄러에 의해 상태를 결정할 수 있을 것이다.
ex) 프로세스 우선 순위 


--- 

프로세스 생성 함수 호출
--> 1) 운영체제에게 요청
--> 프로세스 생성
--> + 해당 프로세스 정보로 채워진, 커널 오브젝트도 생성 


-- 

커널 오브젝트는 운영체제에 의해 관리된다.
프로그래머가 직접 접근할 수 없다. 
간접 접근은 가능하다.

ex) 프로세스 커널 오브젝트에 저장된, 특정 프로세스의 우선순위 정보를 변경하고 싶다
이러한 기능을 제공하는 시스템 함수를 os가 제공해준다는 의미이다. 

-- 
여러 프로세스 , 그에 따라 여러 프로세스 커널 오브젝트.가 생성될 수 있다.
이들을 구분하기 위해, 각각 고유한 번호를 매긴다. ex)  9
이러한 고유한 번호를 가리켜서 "핸들" 이라고 한다. 

우선 순위를 높이기 위해
up 이라는 함수에, 인자로 핸들 9 라는 정보를 전달할 수 있다. 

그러면 9라는 숫가자 매핑되어 있는 커널 오브젝트의 우선순위를 높인다.
실제 핸들 정보는 int 형, 정수 타입.

결국, 커널 오브젝트는 구조체 변수, 핸들은 숫자




*/