// Q. 32 vs 64 bit 구분 기준 2개 ? ---

// 한번에 송수신 가능한 데이터 크기
// - io bus에 의존적 

// 데이터 처리 능력 
// - cpu
// - cpu가 한번에 읽어들일 수 있는 명령어 크기


// 즉, 64bit 라고 완벽하게 얘기하기 위해서는
// - 데이터가 i/o bus에 64bit 크기로 전달될 수도 있어야 하고
// - cpu도 64bit 를 읽어들여서 명령어를 처리해야 한다
// 둘다 64bit 여야만 한다는 것이다

// Q. 32 --> 64 bit 의 의미 ? ---

// 프로그램으로 표현할 수 있는 범위의 증가
// 표현할 수 있는 메모리의 전체 크기 

// Q. 각각에서의 포인터 크기, 포인터 크기의 의의 ? ---

// 일반적으로 32bit 시스템에서는 포인터가 32bit
// 64bit 시스템에서는 포인터도 64bit 를 사용한다.
// 왜 그런 것일까 ?
// 즉, 각각 4byte, 8byte 가 된다.

// 포인터가 크면 클수록, 프로그래머에게 유리하다
// 포인터가 크다는 것은, 우리가 표현가능한 주소의 값이 크다는 것이다
// 포인터가 크다는 것은, 메모리에 접근할 수 있는
// 범위가 그만큼 크다는 것을 의미하기 때문이다 

// 그런데, 포인터 크기를 고려하는 데에 있어서
// I/O Bus 크기도 같이 고려해야 한다.
// 포인터 크기는 128 로 잡고, I/O Bus 크기는 64로 잡았다면 ? 
// 64 * 2 = 128
// 총 2번에 걸쳐서 정보를 전달할 수 밖에 없다는 것이다
// 이는 시스템의 전반적인 성능저하를 가져오게 된다.

// 하나의 주소를 사용하기 위해서
// IO Bus를 2번 사용해야 한다.
// 상당한 성능 저하이다.

// 일단 메모리는 크면 클 수록 좋되
// 버스에서 한번에 전송할 수 있는 크기만큼 !
