/*
--- 컴퓨터 구조의 접근 방법---
- 그래픽 카드도 cpu, gpu라고 부른다
- 연산이 그래픽 처리에 극히 제한되는 것이 gpu
그외에도 다양한 종류의 cpu가 존재한다.44

- 명령어 : 컴파일러를 통해서 
나오게 되는 명령어들의 집합 

Q. 레지스터 디자인의 핵심 3가지 ----------------------

레지스터는 몇 비트로 구성할 것인가
- 32bit 면 32bit, 64bit 면 64bit로 세팅왼다.

몇개 정도로 레지스터를 구성할 것인가
- 레지스터는 많으면 많을 수록 좋다

레지스터 각각을 무슨 용도로 사용할 것인가 ?
- 레지스터는 특별한 목적을 가진 메모리 장치
- 램, 하드디스크는, 단순한 메모리 장치.
그냥 어떤 것이던 저장할 수 있는 형태 
- 반면, 레지스터는 특별한 목적, 용도를 가진 메모리 장치
ex) 어떤 부분은 무엇을 저장, 어떤 부분은 무엇을 저장 
물론 범용적으로 사용할수도 있지만
목적을 정해주면, 
1) 명령어가 단순해진다. 
2) 속도도 빨라진다.

*/

/*
명령어 구조 및 명령어 디자인 -------------------------

명령어 ? 컴파일러를 통해 사람의 코드가 번역된 것

Q. 명령어의 기본 모델 ? -----------

- ex) 32bit 시스템 사용 ? --> 일반적으로 레지스터도 32bit
왜냐하면, 32bit 보다 작으면, 하나의 데이터를
레지스터 안에 한번에 담을 수 없기 때문에
- 명령어도 당연히 32bit가 된다.
그래야만, cpu로 명령어가 fetch 될때, 
하나의 명령어가 하나의 레지스터에 
저장이 가능하기 때문이다 


(다시 보기 )
Q. 명령어의 구조 ? --------------
- 단순하지 않다. 
많은 정보들의 하나의 명령어를 구성한다.
- 피연산자 정보도 들아간다.
- 연산자, 저장소, 피연산자 등이 함께 들어가서
실제 계산 등이 일어나게 되는 것이다 
- 저장소 : 보통, 레지스터에 저장을 해둔다
- 피연산자 : 레지스터 or 숫자 

*/