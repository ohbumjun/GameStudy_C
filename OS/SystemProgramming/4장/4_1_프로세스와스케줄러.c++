/*
Q. 프로세스 ?

- 메인 메모리로 이동하여, 실행중인 프로그램

Q. 프로세스의 범위 

- 메모리 구조 + 레지스터 set

기본적으로 프로세스 하나를 생성을 하면
Code 영역 = 명령어
Data 영역 = 전역 변수, Static 변수
Heap 영역 = 동적 할당
Stak 영역 = 지역 변수, 전달 인자 정보 

이러한 메모리 공간이 할당이 된다. 

그런데
256 mb 의 메모리만 가지고 있는데
만일 4g 의 메모리가 필요한 메모리 공간을 할당 받았다면 ?

즉, 램보다 더 큰 메모리 공간을 할당받았다면 ?
램에 실제로 위의 모든 메모리 공간이 올라갈 수 없다
하드 디스크 까지 영역을 할당해야 한다.

일단, 가상 메모리의 도움으로
위의 메모리가 할당되었다가 생각을 해보자. 
--
또한 프로그램이 실행된다 ?
cpu 에서 프로그램을 실행한다.
왜냐하면 여기에 alu 라는 연산장치가 있기 때문이다.
뿐만 아니라 ALU의 연산을 도와주는 
레지스터 set 도 있다.

레지스터는, 현재 실행중인 프로세스에 대한 정보들로
정보가 가득채워진다.

ex) A 프로세스 실행 --> A 프로세스에 대한 정보가 레지스터에
그러다가 만약 B 프로세스가 실행되면,
기존에 레지스터가 저장하고 있던 A프로세스에 대한 정보는
다른 메모리 set에 저장을 해두고
B 프로세스에 대한 정보가 레지스터를 채운다 .

프로세스 별로,
독립적인 대상
즉, 프로세스가 A -> B, B -> A 바뀔 때
프로세스 별, 독립적인 대상은, 
프로세스에 종속적인 대상은
무조건 프로세스의 범주에 포함시킬 수 있다는 것이다.

Q. 프로세스 재정의  ----

프로세스를 구성하는 범주는,
프로세스 별로 독립적으로 할당받는 리소스다
ex) 메모리 공간, 가상 메모리 공간, 프로세스 별로 
독립적으로 사용하게 되는 레지스터 set도 
프로세스 범주에 속하게 된다.

Q. Context Switching ---
ex) A 프로세스 실행 --> A 프로세스에 대한 정보가 레지스터에
그러다가 만약 B 프로세스가 실행되면,
기존에 레지스터가 저장하고 있던 A프로세스에 대한 정보는
다른 메모리 set에 저장을 해두고, 레지스터를 비운 다음
B 프로세스에 대한 정보가 레지스터를 채운다 .

이러한 과정을 Context Switching 이라고 하는 것이다.

Q. 프로세스 스케줄러 --- 

- 프로세스를 스케줄링 하는 것이다
cpu는 하나이다. 그런데 여러개의 프로세스를 실행 시킨다.
cpu는 한번에 한개의 프로세스만을 실행시킨다.
프로세스 스케줄링은, 프로세스의 순서를 정해줘서
공평하게 cpu에 의해 실행될 수 있도록 관리해주는 것 

- cpu 입장에서는, 프로세스 스케줄러도 프로세스이다.
즉, 스케줄러가 동작하고 있을 때
다른 프로세스들이 일하지 못하고 있을 수도 있다는 것이다. 



*/