'''
Thread VS Process

Section 1
Multithreading - Differences between Process and Thread
Keyword - Process, Thread

'''

'''
(1). 프로세스 
    - 운영체제 --> 할당받는 자원 단위(실행 중인 프로그램)
    ex) 현재 VScode 도, 프로세스에서 실행되는 중이다 
    - CPU 동작 시간, 주소 공간(독립적)
    ex) 게임 실행, vsCode 실행 , chrome 모두 별개의 프로그램
    ex) 서로 다른 프로세스 간에 연관관계는 존재하지 않는다
    ex) 메모리도 모두 독립적이다
    - Code, Data, Stack, Heap 영역이 모두 독립적이다 
    - 최소 1개의 Main thread를 보유한다
    ex) 프로세스 안에 Thread가 존재한다
    - 파이프, 파일, 소켓 등을 사용해서 프로세스간 통신이 가능하다
    ex) Cost가 높다 == Context-Switching Cost가 크다 

(2). 스레드
    - 프로세스 내의 실행 흐름 단위 
    ex) 하나의 프로세스 내에 여러개 스레드를 실행할 수 있다
    ex) Chrome 내 여러개 창
    ex) 게임 내 음성 채팅, 게임 화면, 음악 등등
    - 프로세스의 자원을 사용한다
    - Stack만 별도로 사용하고, 나머지는 공유(Code,Data,Heap)을 공유
    - 메모리 공유(변수 공유)
    - 한 스레드의 결과가, 다른 스레드에 영향을 끼친다
    - 동기화 문제는 매우 주의해야 한다(디버깅이 어렵다)

(3). 멀티 스레드
    - 한개의 단일 어플리케이션(응용 프로그램) --> 여러 스레드로 구성 후, 작업 처리 
    - 효율성 증가 : 시스템 자원 소모 감소 ( 프로세스 많이 띄우면, 운영체제 부담. 하나의 프로세스 내에 서로 자원을 공유하는
    여러 쓰레드를 할당하는 것이 더 효과적)
    - 처리량 증가 : Cost 감소
    - 통신 부담 감소(공유하는 변수 등 존재)
    - 디버깅이 어렵다 
    - 단일 프로세스에는 효과가 미약하다
    - 자원 공유 문제(교착 상태 == Dead Lock)
    - 프로세스에 영향을 준다

(4). 멀티 프로세스 
    - 한개의 단일 어플리케이션(응용 프로그램) --> 여러 프로세스로 구성후 작업 처리
    - 한개의 프로세스 문제 발생은, 확산이 없다 ( 멀티 스레드에서는 있다 )
    - 캐시 체인지 , Cost 비용이 매우 높다 ( Overhead )
    - 복잡한 통신 방식을 사용 ex) 소켓 --( 그래서 Context-Switching 비용이 큰 것)



'''
