// https://boycoding.tistory.com/120
/*
<서비스 중개자 패턴>


게임에서의 오디오 시스템
- 각 효과마다, 오디오 시스템의
함수를 호출한다고 가정할 때
ex) 걷기, 싸위

1)  정적 클래스를 쓸 수도 있고 
AudioSystem::playSound(VERY_LOUD_BANG); 
2)  싱글턴을 쏠 수도 있다. 
AudioSystem::instance()->playSound(VERY_LOUD_BANG);

둘다 원하는 결과는 얻을 수 있으나,
강한 커플링도 함께 생긴다.

오디오 시스템을 접근하는 모든 곳에서
1) Audio Systme이라는 구체적인 클래스 뿐 아니라
2) 정적 클래스 또는 싱글턴으로 만든ㄷ, 
접근 메커니즘까지 직접 참조

즉, 우편물 하나 받겠다고
수많은 이방인에게 집주소 알려주는 것과 다를 바 없다

이보다는 호출하는 쪽에서
전화번호부 통해 찾게 함으로싸
"찾을 방법을 한곳에서 편하게 관리할 수 있다."

이것이 서비스 중개자 패턴의 핵심이다.
서비스 중개자 패턴은, 
서비스를 사용하는 코드로부터

------------------------------------------------------

서비스가 누구인지, 
( 서비스를 구현한 구체 클래스 자료형이 무엇인지 )

어디에 있는지
( 클래스 인스턴스를 어떻게 얻을지)를 몰라도 되게 해준다.

*/