// Q. 멤버 변수, 멤버 함수 ?            --- 

// 클래스를 구성하는 / 클래스 내에 선언된 변수 = "멤버 변수"
// 클래스를 구성하는 / 클래스 내에 선언된 함수 = "멤버 함수"

// Q. 헤더 파일, 소스 파일 구분 기준 ?   --- 
// .h   : 클래스의 선언을 담는다
// .cpp : 클래스의 정의(멤버함수의 정의)를 담는다

// Q. 클래스의 선언 ? 클래스의 정의 ?    ---
class Car
{
private :
    // ~
public : 
    // ~
};

// 컴파일러가 Car 클래스와 관련된 문장의 오류를 잡아내는데 필요한
// 최소한의 정보로써, 클래스를 구성하는 외형적인 틀을 보여준다.
// 즉, Car 클래스 관련된 문장의 "컴파일" 정보로 사용한다.
// 따라서 헤더 파일에 저장한다. 
int main()
{
    Car run99;
    run99.fuel = 100; // fuel이 private 임을 확인하고 에러 발생 
};

// 반면, 클래스의 정ㅇ의는, 다른 문장의 컴파일에 필요한
// 정보를 깆고 있지 않다
// 따라서, 소스파일에 저장해서, 컴파일이 되도록 하면 된다.
void Car::Run(){}

// Q. 인라인 함수는 어디에 ? 그 이유 ? ---

// 헤더 파일에 넣어야 한다.
inline void Car::Break(){} // .cpp 세팅
int main()
{
    Car run99;
    //  "컴파일 에러"
    // 왜냐하면 컴파일 과정에서 함수의 호출문이 있는 곳에
    // 함수의 몸체 부분이 삽입되어야 하기 때문이다.
    // 즉, 컴파일 과정에서 바로 헤더 파일 입장에서
    // 왜냐하면 헤더 파일이 클래스 관련 문장의 "컴파일" 정보로 사용되고므로
    // 몸체 부분으로 바꿔준 녀석을 알고 있어야 한다는 것이다. 
    run99.Break();
}
